import pandas as pd # Importa o pandas

df = pd.read_csv('caminho/nome_base.csv', encoding = "UTF-8") # Cria uma variavel chamada dataframe [df] que recebe o valor de pd.read_csv, nesse caso ela está lendo um csv que é um formato de planilha.

    encoding  : padrão de codificação do arquivo # encoding = "UTF-8"
    
    sep : Separador, isso é o caractere que separa as colunas. # sep=';'
    
    header : Especifica a linha onde começa o cabeçalho da sua planilha. # header=1
    
    usecols : Especifica as colunas que irã ser selecionadas # usecols=['Nome_coluna']
    
    nrows : Especifica o número máximo de linhas que irão ser lidas # nrows=200

df.head() # Exibe a cabeça da planilha, isso é algumas colunas com algumas linhas [nem todas as linhas são exibidas], no meu caso ele exibiu o equivalente a 5 linhas e todas as colunas.

df.shape # Retorna uma tupla que o primeiro elemento é o número de linahs e o segundo é o número de colunas da planilha.

df = pd.read_excel("caminho/nome_base.xlsx") # Cria uma variavel chamada dataframe [df] que recebe o valor de pd.read_excel, nesse caso ela está lendo um xlsx que é um formato de planilha.

    sheet_name : Abre a planilha no número da aba especificada # sheet_name=1 || sheet_name="nome_aba"
    
ef = pd.ExcelFile("caminho/nome_base.xlsx") # Cria uma variavel chamada de excel_file [ef] que recebe o valor de pd.ExcelFile, ele irá fazer a leitura desse arquivo.

ef.sheet_names # Retorna o nome das abas da planilha

tab_one = ef.parse("Nome_Aba") # Cria uma variavel que recebe todos os dados da aba especificada.

# Para selecionar uma ou varias colunas faça da seguinte forma :

    df[["nome_coluna", "nome_coluna"]].head()
    
    ou
    
    df.nome_coluna.head()
    
# Para adicionar uma nova coluna faça da seguinte maneira : 

    df["nome_nova_coluna"] = valor
    
    # Esse valor pode ser tanto valores de outras colunas como dados propios.
    
# Para selecionar uma linha :

    df.loc[numero_da_linha]
    
    df.loc[0]
        
    # Quando usamos df.head() ele nos retorna algumas linhas e antes dessas linhas temos o indice dela, começando em 0, esse numero_da_linha é o indice dessa linha, isso é o indice que o df gera.
    
    # Também podemos selecionar intervalos:
    
    df.loc[numero_da_linha : numero_da_linha : jump]
    
    # df.loc[0 : 3 : 2] 
    
    # Jump indica que ele irá ler uma linha e pular o número equivalente até chegar na proxima, caso não seja informado ele irá valer 1.
    
    # Selecionar Linhas especificas :
    
    df.loc[[linha, linha, linha]]
    
    # df.loc[[1, 5, 6]]
    
    # Selecionar linhas e colunas especificas
    
    df.loc[linha, "coluna"]
    
    # df.loc[0, "area"] # Seleciona uma coluna especifica 
    
    # df.loc[0:5, [["animal", "total"]] # Seleciona varias colunas 
    
    # df.loc[0:15:5, "area":"floor":1] # Seleciona um intervalo entre colunas
    
# Iloc

# o iloc funciona como o loc porém ele só trabalha com números e segue a regra do python puro, isso é se eu mandar ele exibir até o indice 5 ele irá exibir somente até o indice 4 pois a contagem começa a partir do 0 e acresenta mais um sendo assim 5 - 1 = 4

    df.iloc[linha] # Seleciona uma linha
    
    # df.iloc[0]
    
    df.iloc[[linha, linha]] # Seleciona linhas especificas.
    
    # df.iloc[[0, 6]]
    
    df.iloc[linha:linha:jump] # Seleciona o intervalo de linhas respeitando o jump.
    
    # df.iloc[0 : 6 : 1]
    
    df.iloc[linha:linha, coluna] # Seleciona o intervalo de linhas verificando a coluna que corresponde aquele número.
    
    # df.iloc[0 : 6, 2]
    
    df.iloc[linha:linha, [coluna, coluna] # Seleciona o intervalo de linhas e as colunas especificadas.
    
    # df.iloc[0 : 6, [1, 6]
    
    df.iloc[linha:linha, coluna:coluna] # Seleciona o intervalo de linhas e o intervalo de colunas.
    
    # df.iloc[0 : 6, 0 : 6]
    
    No caso com exeção ao zero todos os outros valores acabam sendo considerados como eles mesmo - 1, dessa forma se eu ordenar que ele exbia até a linha 6 ele irá exibir até a linha 5 pois a contagem começa a partir do 0.
    
# ORDENAR VALORES

    df.sort_values("coluna") # Ordena os valores de forma crescente a partir da coluna
    
    # df.sort_values("area")
    
    df.sort_values(by = ["coluna_1", "coluna_2"]) # Ordena os valores de forma crescente a partir das colunas, by é opcional
    
    # df.sort_values(["area", "total"])
    
    # Nesse tipo de comandos podemos definir o paramentro inplace como True, esse paramentro altera diretamente o dado, sendo assim não é necessario criar uma variavel que vai conter a reorganização, o dataframe já vai ser alterado obedecendo a nova organização
    
    # df.sort_values("area", inplace = True)
    
    # Podemos ordenar de forma crescente ou decrescente
    
    df.sort_values("coluna", ascending = True) # Ordena de forma crescente
    
    # df.sort_values("area", ascending = True)
    
    df.sort_values("coluna", ascending = False) # Ordena de forma decresente
    
    # df.sort_values("area", ascending = False)
    
    # Caso ordenemos multiplas colunas tempos que passar um ascending por ela, isso é feito por meio de uma lista, assim ele poderá organizar uma coluna de forma crescente a outra não.
    
    df.sort_values(by = ["coluna_1", "coluna_2"], ascending = [True, False])
    
    # df.sort_values(["area", "total"], ascending = [True, False])
    
# Filtrando valores

    # Podemos filtrar valores das formas mostradas anteriomentes ou usando o filter
    
    df.filter(items = ["coluna", "coluna", "coluna"])
    
    # df.filter(items = ["area", "rooms", "animal"])
    
    # Usando like para retornar a célula que contem determinado dado
    
    df.filter(like = 'dado')
    
    # df.filter(like = 'furnished')
    
    # Regex
    
    df.filter(regex = 'expressão')
    
    # df.filter(regex = '(R$121)')
    
# Operadores logicos || Condições

    df['coluna'] Condição # Irá retornar as linhas da coluna do df que correspondem aquela condição
    
    # df['area'] == 240
    
    df[['coluna_1', 'coluna_2', 'coluna_3']] (condição) # Irá retornar as linhas da coluna do df que correspondem aquela condição
    
    # df[['area', 'rooms', 'total']].head() != (240, 2, 'R$1,493')
    
    df[coluna condição] # Irá retornar as linhas em que a coluna do df atende a condição especificada
    
    # df[df.total > 'R$1,000']
    
    df[(df.coluna condição) & (df.coluna condição)] # Retorna todas as linhas que atendam as condições, nesse caso podemos colocar quantas condições nós quisermos, usa-se & para representar o and e | para representar o or
    
    # df[(df.area > 500) & (df.rooms > 5) & (df.total > 'R$15,000') & (df.animal == 'acept')]
    
    # df[(df.area > 500) & (df.rooms > 5) & (df.total > 'R$15,000') & (df.animal == 'acept')][['city', 'area']] # irá filtrar da mesma forma mas também irá incluir as colunas.
    
    # df[(df.area > 100) & (df.total > 'R$15,000') & ((df.rooms == 1) | (df.rooms != 3))] # Essa é a forma de usar o or, coloque os paramentros entre () e cara paramentro deve ficar entre ()
    
# ISIN

    O isin funciona da mesma maneira do is do sql, basicamente serve para você filtrar valores sem colocar diversos |
    
    df[(df.coluna.isin(['valor', 'valor'...]))] # Retorna todos os valores da coluna que atendem a condição do isin
    
    # df[(df.rooms.isin([2, 3]))]
    
# Funções de agrupamento

    df.coluna.mean() # Retorna a média do valor da coluna, valido somente para colunas numericas
    
    # df.area.mean()
    
    df.coluna.min() # Retorna o valor minimo da coluna.
    
    # df.area.min()
    
    df.coluna.max() # Retorna o maior valor da coluna.
    
    # df.area.max()
    
    df.coluna.sum() # Retorna a soma dos valores da coluna.
    
    # df.area.sum()
    
# Agrupamento
    
    df[["coluna_1", "coluna_2"]].groupby(["coluna_1"]).função_agrupamento() # Básicamente irá selecionar 2 colunas [pode selecionar quantas você quiser] e irá agrupar elas de acordo com a coluna_1 [pode agrupar quantas você quiser], lembre-se de colocar a função de agrupamento pois se isso não for feito o python irá retornar um objeto.
    
    # df[["city", "area"]].groupby(["city"]).max()
    
# Replace

    df[["colunas"]].applymap(lambda x : x.replace('R$', '').replace(',', '')) # Basicamente irá fazer com que as colunas selecionadas dentro do dataframe sofram as alterações do replace, dentro de applymap deve ser passado uma função, por isso o lambda, mas esse valores serão perdidos, por isso é necessario passar eles novamente para o dataframe.

    # df[["hoa", "rent amount", "total", 'fire insurance', 'property tax']].applymap(lambda x : x.replace('R$', '').replace(',', ''))
    
    # df[["hoa", "rent amount", "total", 'fire insurance', 'property tax']] = df[["hoa", "rent amount", "total", 'fire insurance', 'property tax']].applymap(lambda x : x.replace('R$', '').replace(',', '')) # Faz a mesma coisa do anterior mas adiciona os valores para o dataframe.
    
    # Por motivos que ficaria enorme passar diversas colunas, você pode criar uma lista que já detenha as colunas e depois só passar ela.
    
    # colums = ["hoa", "rent amount", "total", 'fire insurance', 'property tax']
    # df[colums] = df[colums].applymap(lambda x : x.replace('R$', '').replace(',', ''))
